import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.github.jengelman.gradle.plugins.shadow.ShadowJavaPlugin
import org.gradle.kotlin.dsl.create

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    alias(libs.plugins.shadow)
    id("com.bmuschko.docker-remote-api") version "9.4.0"
}


dependencies {
    implementation(libs.edc.ih.lib.credentialquery) // needed in the extensions here

    runtimeOnly(libs.edc.bom.identityhub)
    runtimeOnly(libs.edc.vault.hashicorp)
    runtimeOnly(libs.edc.bom.identityhub.sql)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass.set("org.eclipse.edc.boot.system.runtime.BaseRuntime")
}

tasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar> {
    exclude("**/pom.properties", "**/pom.xml")
    mergeServiceFiles()
    archiveFileName.set("identityhub.jar")
}

afterEvaluate {
    if (project.plugins.hasPlugin("com.github.johnrengelman.shadow") &&
        file("${project.projectDir}/src/main/docker/Dockerfile").exists()
    ) {

        //actually apply the plugin to the (sub-)project
        apply(plugin = "com.bmuschko.docker-remote-api")
        // configure the "dockerize" task
        val dockerTask: DockerBuildImage = tasks.create("dockerize", DockerBuildImage::class) {
            val dockerContextDir = project.projectDir
            dockerFile.set(file("$dockerContextDir/src/main/docker/Dockerfile"))
            images.add("identityhub:latest")
            // specify platform with the -Dplatform flag:
            if (System.getProperty("platform") != null)
                platform.set(System.getProperty("platform"))
            buildArgs.put("JAR", "build/libs/identityhub.jar")
            inputDir.set(file(dockerContextDir))
        }
        // make sure  always runs after "dockerize" and after "copyOtel"
        dockerTask.dependsOn(tasks.named(ShadowJavaPlugin.SHADOW_JAR_TASK_NAME))
    }
}
